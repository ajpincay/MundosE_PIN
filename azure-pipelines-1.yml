# Deploy to Azure Kubernetes Service
# Build and push image to Azure Container Registry; Deploy to Azure Kubernetes Service
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

trigger:
- main

resources:
- repo: self

variables:

  # Container registry service connection established during pipeline creation
  dockerRegistryServiceConnection: '89f16f5e-52d4-468f-885b-aac83bc11f32'
  imageRepository: 'mundose'
  containerRegistry: 'mundose.azurecr.io'
  dockerfilePath: '**/Dockerfile'
  tag: '$(Build.BuildId)'
  imagePullSecret: 'mundose466a-auth'

  # Agent VM image name
  vmImageName: 'ubuntu-latest'


stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    displayName: Build
    pool:
      vmImage: $(vmImageName)
    steps:
    - task: DockerCompose@0
      displayName: Docker Compose Build
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'mundose'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Build services'
        includeSourceTags: true
        includeLatestTag: true
    
    - task: DockerCompose@0
      displayName: Docker Compose Push
      inputs:
        containerregistrytype: 'Container Registry'
        dockerRegistryEndpoint: 'mundose'
        dockerComposeFile: '**/docker-compose.yml'
        action: 'Push services'
        includeSourceTags: true
        includeLatestTag: true

    - task: HelmInstaller@0
      inputs:
        helmVersion: '2.14.1'
        installKubectl: true
    
    - task: HelmDeploy@0
      displayName: Pack Helm chart
      inputs:
        command: 'package'
        chartPath: 'deploy/k8s/helm'
        chartVersion: '$(Build.BuildId)'

    - upload: manifests
      artifact: manifests

- stage: Deploy
  displayName: Deploy stage
  dependsOn: Build

  jobs:
  - deployment: Deploy
    displayName: Deploy
    pool:
      vmImage: $(vmImageName)
    environment: 'ajpincayMundosEPIN-2124.mundose'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: KubernetesManifest@0
            displayName: Create imagePullSecret
            inputs:
              action: createSecret
              secretName: $(imagePullSecret)
              dockerRegistryEndpoint: $(dockerRegistryServiceConnection)

          - task: KubernetesManifest@0
            displayName: Deploy to Kubernetes cluster
            inputs:
              action: deploy
              manifests: |
                $(Pipeline.Workspace)/manifests/deployment.yml
                $(Pipeline.Workspace)/manifests/service.yml
              imagePullSecrets: |
                $(imagePullSecret)
              containers: |
                $(containerRegistry)/$(imageRepository):$(tag)

